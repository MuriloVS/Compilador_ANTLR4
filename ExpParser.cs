//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Exp.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    #pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class ExpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, SPACE=2, PLUS=3, MINUS=4, TIMES=5, OVER=6, REM=7, OP_PAR=8, 
		CL_PAR=9, ATTRIB=10, COMMA=11, OP_CUR=12, CL_CUR=13, EQ=14, NE=15, GT=16, 
		GE=17, LT=18, LE=19, PRINT=20, READ_INT=21, READ_STR=22, IF=23, ELSE=24, 
		WHILE=25, BREAK=26, CONTINUE=27, PUSH=28, LENGTH=29, OP_BRA=30, CL_BRA=31, 
		DOT=32, DEF=33, INT=34, RETURN=35, NUMBER=36, NAME=37, STRING=38;
	public const int
		RULE_program = 0, RULE_function = 1, RULE_parameters = 2, RULE_main = 3, 
		RULE_statement = 4, RULE_st_print = 5, RULE_st_if = 6, RULE_st_while = 7, 
		RULE_st_break = 8, RULE_st_continue = 9, RULE_st_array_new = 10, RULE_st_array_push = 11, 
		RULE_st_array_set = 12, RULE_st_attib = 13, RULE_comparison = 14, RULE_expression = 15, 
		RULE_term = 16, RULE_factor = 17, RULE_st_call = 18, RULE_arguments = 19, 
		RULE_st_return = 20;
	public static readonly string[] ruleNames = {
		"program", "function", "parameters", "main", "statement", "st_print", 
		"st_if", "st_while", "st_break", "st_continue", "st_array_new", "st_array_push", 
		"st_array_set", "st_attib", "comparison", "expression", "term", "factor", 
		"st_call", "arguments", "st_return"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", "'='", 
		"','", "'{'", "'}'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'print'", 
		"'read_int'", "'read_str'", "'if'", "'else'", "'while'", "'break'", "'continue'", 
		"'push'", "'length'", "'['", "']'", "'.'", "'def'", "'int'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "SPACE", "PLUS", "MINUS", "TIMES", "OVER", "REM", "OP_PAR", 
		"CL_PAR", "ATTRIB", "COMMA", "OP_CUR", "CL_CUR", "EQ", "NE", "GT", "GE", 
		"LT", "LE", "PRINT", "READ_INT", "READ_STR", "IF", "ELSE", "WHILE", "BREAK", 
		"CONTINUE", "PUSH", "LENGTH", "OP_BRA", "CL_BRA", "DOT", "DEF", "INT", 
		"RETURN", "NUMBER", "NAME", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    List<string> symbol_table = new List<string>();
	    List<char> type_table = new List<char>();
	    List<string> used_table = new List<string>();

	    string params_modifier = "";
	    string return_modifier = "";

	    int stack_max = 0;
	    int stack_curr = 0;
	    
	    int if_global = 0;
	    // List<int> ifs = new List<int>();
	   
	    int while_global = 0;  
	    List<int> whiles = new List<int>();  

	    int arguments_global = 0;
	    //List<int>arguments_local = new List<int>();

	    List<string> functions_list = new List<string>();

	    bool has_error = false;
	    bool has_return = false;

	    void Emit(string s, int n)
	    {
	        stack_curr += n;

	        if (stack_curr > stack_max) {
	            stack_max = stack_curr;
	        }

	        // if só para melhorar o visual, o espaço extra não influenciava em nada
	        if(s[0] != 'N' && s[0] != 'B' && s[0] != 'E') {
	            System.Console.WriteLine("    " + s);
	        } else {
	            System.Console.WriteLine(s);
	        }
	    }

		public ExpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{

			        System.Console.WriteLine(".source Test.src");
			        System.Console.WriteLine(".class  public Test");
			        System.Console.WriteLine(".super  java/lang/Object\n");
			        System.Console.WriteLine(".method public <init>()V");
			        System.Console.WriteLine("    aload_0");
			        System.Console.WriteLine("    invokenonvirtual java/lang/Object/<init>()V");
			        System.Console.WriteLine("    return");
			        System.Console.WriteLine(".end method\n");
			    
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEF) {
				{
				{
				State = 43;
				function();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			main();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken _NAME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(ExpParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PAR() { return GetToken(ExpParser.OP_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_PAR() { return GetToken(ExpParser.CL_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_CUR() { return GetToken(ExpParser.OP_CUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_CUR() { return GetToken(ExpParser.CL_CUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ExpParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(DEF);
			State = 52;
			_localctx._NAME = Match(NAME);
			State = 53;
			Match(OP_PAR);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 54;
				parameters();
				}
			}

			State = 57;
			Match(CL_PAR);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT) {
				{
				State = 58;
				Match(INT);

				        has_return = true;
				    
				}
			}


			        for (int i = 0; i < symbol_table.Count; i++) {
			            params_modifier += "I";
			        }

			        return_modifier = has_return ? "I" : "V";
			        
			        string func_name = (_localctx._NAME!=null?_localctx._NAME.Text:null) + "(" + params_modifier + ")" + return_modifier;

			        if (functions_list.Contains(func_name)) {
			            Console.Error.WriteLine("# error - function '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' already declared - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));             
			            has_error = true;
			        } else {
			            functions_list.Add(func_name);
			            System.Console.WriteLine(".method public static " + func_name + "\n"); 
			        }
			    
			State = 63;
			Match(OP_CUR);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << NAME))) != 0)) {
				{
				{
				State = 64;
				statement();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			Match(CL_CUR);

			        System.Console.WriteLine("\n    return");
			        System.Console.WriteLine(".limit stack " + stack_max);

			        if (symbol_table.Count > 0) {
			            System.Console.WriteLine(".limit locals " + symbol_table.Count);
			        }

			        System.Console.WriteLine(".end method");
			        
			        System.Console.Write("\n; symbol_table: ");
			        foreach (string s in symbol_table) {
			            System.Console.Write(s + " ");
			        }
			        System.Console.Write("\n; type_table: ");
			        foreach (char c in type_table) {
			            System.Console.Write(c + " ");
			        }        
			        System.Console.Write("\n; used_table: ");
			        foreach (string s in used_table) {
			            System.Console.Write(s + " ");
			        }
			        System.Console.WriteLine("\n");

			        params_modifier = "";
			        symbol_table.Clear();
			        type_table.Clear();
			        used_table.Clear();
			        stack_curr = 0;
			        stack_max = 0;
			        has_return = false;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public IToken _NAME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(ExpParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(ExpParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExpParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 4, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_localctx._NAME = Match(NAME);

			        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            symbol_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null));
			            used_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null));
			            type_table.Add('i');
			        } else {
			            Console.Error.WriteLine("# error: parameter names must be unique - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));    
			            has_error = true;
			        }
			    
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 75;
				Match(COMMA);
				State = 76;
				_localctx._NAME = Match(NAME);

				        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
				            symbol_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null));
				            used_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null));
				            type_table.Add('i');
				        } else {
				            Console.Error.WriteLine("# error: parameter names must be unique - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0)); 
				            has_error = true;
				        }
				    
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 6, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{

			        System.Console.WriteLine(".method public static main([Ljava/lang/String;)V\n");               
			    
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 84;
				statement();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << NAME))) != 0) );

			        foreach (string s in symbol_table)
			        {
			            if (!used_table.Contains(s))
			            {
			                Console.Error.WriteLine("# error: variable not used: '" + s + "'");             
			                has_error = true;
			            }
			        }

			        System.Console.WriteLine("    return");
			        System.Console.WriteLine(".limit stack " + stack_max); 

			        if (symbol_table.Count > 0) {
			            System.Console.WriteLine(".limit locals " + symbol_table.Count);
			        }

			        System.Console.WriteLine(".end method");
			        System.Console.Write("\n; symbol_table: ");
			        foreach (string s in symbol_table) {
			            System.Console.Write(s + " ");
			        }
			        System.Console.Write("\n; type_table: ");
			        foreach (char c in type_table) {
			            System.Console.Write(c + " ");
			        }
			        System.Console.Write("\n; used_table: ");
			        foreach (string s in used_table) {
			            System.Console.Write(s + " ");
			        }

			        if (has_error) {
			            System.Environment.Exit(1);
			        }
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public St_printContext st_print() {
			return GetRuleContext<St_printContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_attibContext st_attib() {
			return GetRuleContext<St_attibContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_ifContext st_if() {
			return GetRuleContext<St_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_whileContext st_while() {
			return GetRuleContext<St_whileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_breakContext st_break() {
			return GetRuleContext<St_breakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_continueContext st_continue() {
			return GetRuleContext<St_continueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_array_newContext st_array_new() {
			return GetRuleContext<St_array_newContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_array_pushContext st_array_push() {
			return GetRuleContext<St_array_pushContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_array_setContext st_array_set() {
			return GetRuleContext<St_array_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_callContext st_call() {
			return GetRuleContext<St_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_returnContext st_return() {
			return GetRuleContext<St_returnContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				st_print();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				st_attib();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93;
				st_if();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94;
				st_while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 95;
				st_break();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 96;
				st_continue();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 97;
				st_array_new();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 98;
				st_array_push();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 99;
				st_array_set();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 100;
				st_call();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 101;
				st_return();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_printContext : ParserRuleContext {
		public ExpressionContext e1;
		public ExpressionContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ExpParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PAR() { return GetToken(ExpParser.OP_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_PAR() { return GetToken(ExpParser.CL_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExpParser.COMMA, i);
		}
		public St_printContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_print; } }
	}

	[RuleVersion(0)]
	public St_printContext st_print() {
		St_printContext _localctx = new St_printContext(Context, State);
		EnterRule(_localctx, 10, RULE_st_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(PRINT);
			State = 105;
			Match(OP_PAR);

			        Emit("getstatic java/lang/System/out Ljava/io/PrintStream;", 1);
			    
			State = 107;
			_localctx.e1 = expression();

			        if (_localctx.e1.type == 'i') {
			            Emit("invokevirtual java/io/PrintStream/print(I)V", -2);
			        } else if (_localctx.e1.type == 's') {
			            Emit("invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V", -2);        
			        } else if (_localctx.e1.type == 'a') {
			            Emit("invokevirtual Array/string()Ljava/lang/String;", 0);        
			            Emit("invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V\n", 0);        
			        } else {
			            Console.Error.WriteLine("# error: type error in 'e1' expression.\n");         
			            has_error = true;
			        }
			    
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 109;
				Match(COMMA);

				        Emit("getstatic java/lang/System/out Ljava/io/PrintStream;", 1);
				    
				State = 111;
				_localctx.e2 = expression();

				        if (_localctx.e2.type == 'i') {
				            Emit("invokevirtual java/io/PrintStream/print(I)V", -2);
				        } else if (_localctx.e2.type == 's') {
				            Emit("invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V", 1);        
				        } else {
				            Console.Error.WriteLine("# error: type error in 'e2' expression\n");         
				            has_error = true;
				        }
				    
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119;
			Match(CL_PAR);

			        Emit("getstatic java/lang/System/out Ljava/io/PrintStream;", 1);
			        Emit("invokevirtual java/io/PrintStream/println()V\n", -1);
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ExpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_CUR() { return GetTokens(ExpParser.OP_CUR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_CUR(int i) {
			return GetToken(ExpParser.OP_CUR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CL_CUR() { return GetTokens(ExpParser.CL_CUR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_CUR(int i) {
			return GetToken(ExpParser.CL_CUR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ExpParser.ELSE, 0); }
		public St_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_if; } }
	}

	[RuleVersion(0)]
	public St_ifContext st_if() {
		St_ifContext _localctx = new St_ifContext(Context, State);
		EnterRule(_localctx, 12, RULE_st_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(IF);
			State = 123;
			comparison();

			        int if_local = if_global;
			        if_global++;        
			        Emit("NOT_IF_" + if_local, -2); 
			    
			State = 125;
			Match(OP_CUR);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 126;
				statement();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << NAME))) != 0) );
			State = 131;
			Match(CL_CUR);

			        Emit("goto END_ELSE_" + if_local, 0);
			        System.Console.WriteLine("NOT_IF_" + if_local + ":");
			    
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 133;
				Match(ELSE);
				State = 134;
				Match(OP_CUR);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 135;
					statement();
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << NAME))) != 0) );
				State = 140;
				Match(CL_CUR);
				}
			}

			       
			        System.Console.WriteLine("END_ELSE_" + if_local + ":");
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_CUR() { return GetToken(ExpParser.OP_CUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_CUR() { return GetToken(ExpParser.CL_CUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public St_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_while; } }
	}

	[RuleVersion(0)]
	public St_whileContext st_while() {
		St_whileContext _localctx = new St_whileContext(Context, State);
		EnterRule(_localctx, 14, RULE_st_while);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(WHILE);
			     
			        whiles.Add(while_global);
			        while_global++;    
			        
			        System.Console.WriteLine("\n    BEGIN_WHILE_" + whiles[whiles.Count - 1] + ":\n");        
			    
			State = 148;
			comparison();

			        Emit("END_WHILE_" + whiles[whiles.Count - 1], 0); 
			    
			State = 150;
			Match(OP_CUR);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 151;
				statement();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << NAME))) != 0) );

			        if (whiles.Count > 0) {
			            Emit("goto BEGIN_WHILE_" + whiles[whiles.Count - 1], 0);        
			            System.Console.WriteLine("\n    END_WHILE_" + whiles[whiles.Count - 1] + ":\n");
			            whiles.RemoveAt(whiles.Count - 1);
			        }        
			    
			State = 157;
			Match(CL_CUR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_breakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(ExpParser.BREAK, 0); }
		public St_breakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_break; } }
	}

	[RuleVersion(0)]
	public St_breakContext st_break() {
		St_breakContext _localctx = new St_breakContext(Context, State);
		EnterRule(_localctx, 16, RULE_st_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(BREAK);

			        if (whiles.Count == 0) {
			            Console.Error.WriteLine("# error: trying to use 'break' outside a loop.");         
			            has_error = true;
			        } else {
			            Emit("goto END_WHILE_" +  whiles[whiles.Count - 1], 0);
			        }
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_continueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(ExpParser.CONTINUE, 0); }
		public St_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_continue; } }
	}

	[RuleVersion(0)]
	public St_continueContext st_continue() {
		St_continueContext _localctx = new St_continueContext(Context, State);
		EnterRule(_localctx, 18, RULE_st_continue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(CONTINUE);

			        if (whiles.Count == 0) {
			            Console.Error.WriteLine("# error: trying to use 'continue' outside a loop.");         
			            has_error = true;
			        } else {
			            Emit("goto BEGIN_WHILE_" + whiles[whiles.Count - 1], 0);
			        }
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_array_newContext : ParserRuleContext {
		public IToken _NAME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIB() { return GetToken(ExpParser.ATTRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BRA() { return GetToken(ExpParser.OP_BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_BRA() { return GetToken(ExpParser.CL_BRA, 0); }
		public St_array_newContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_array_new; } }
	}

	[RuleVersion(0)]
	public St_array_newContext st_array_new() {
		St_array_newContext _localctx = new St_array_newContext(Context, State);
		EnterRule(_localctx, 20, RULE_st_array_new);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_localctx._NAME = Match(NAME);
			State = 166;
			Match(ATTRIB);
			State = 167;
			Match(OP_BRA);
			State = 168;
			Match(CL_BRA);

			        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            symbol_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null));
			            type_table.Add('a');

			            Emit("new Array", 1);
			            Emit("dup", 1);
			            Emit("invokespecial Array/<init>()V", -1);

			            int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));
			            Emit("astore " + index + "\n", 1);            
			        } else {
			            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is already declared - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));         
			            has_error = true;
			        }        
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_array_pushContext : ParserRuleContext {
		public IToken _NAME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ExpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUSH() { return GetToken(ExpParser.PUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PAR() { return GetToken(ExpParser.OP_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_PAR() { return GetToken(ExpParser.CL_PAR, 0); }
		public St_array_pushContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_array_push; } }
	}

	[RuleVersion(0)]
	public St_array_pushContext st_array_push() {
		St_array_pushContext _localctx = new St_array_pushContext(Context, State);
		EnterRule(_localctx, 22, RULE_st_array_push);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			_localctx._NAME = Match(NAME);
			   
			        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            Console.Error.WriteLine("# error: variable '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' does not exist - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));         
			            has_error = true;
			        }

			        if (!used_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            used_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null)); 
			        }
			        int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));                    
			        Emit("aload " + index, 1);        
			    
			State = 173;
			Match(DOT);
			State = 174;
			Match(PUSH);
			State = 175;
			Match(OP_PAR);
			State = 176;
			expression();
			   
			        Emit("invokevirtual Array/push(I)V\n", -2);        
			    
			State = 178;
			Match(CL_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_array_setContext : ParserRuleContext {
		public IToken _NAME;
		public ExpressionContext e1;
		public ExpressionContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BRA() { return GetToken(ExpParser.OP_BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_BRA() { return GetToken(ExpParser.CL_BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIB() { return GetToken(ExpParser.ATTRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public St_array_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_array_set; } }
	}

	[RuleVersion(0)]
	public St_array_setContext st_array_set() {
		St_array_setContext _localctx = new St_array_setContext(Context, State);
		EnterRule(_localctx, 24, RULE_st_array_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_localctx._NAME = Match(NAME);

			        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' not defined - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
			            has_error = true;
			        } else {
			            int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));
			            char type = type_table[index];
			            if (type != 'a') {
			                Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is not array - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));  
			                has_error = true;                  
			            } else {
			                Emit("aload " + index, -1);      
			            }
			        }
			    
			State = 182;
			Match(OP_BRA);
			State = 183;
			_localctx.e1 = expression();
			State = 184;
			Match(CL_BRA);
			State = 185;
			Match(ATTRIB);
			State = 186;
			_localctx.e2 = expression();
			              
			        if (_localctx.e1.type != 'i') {
			            Console.Error.WriteLine("# error: array index must be integer - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));         
			            has_error = true;
			        } else if (_localctx.e2.type != 'i') {
			            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is array - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));         
			            has_error = true;        
			        }

			        Emit("invokevirtual Array/set(II)V\n", -3);        
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_attibContext : ParserRuleContext {
		public IToken _NAME;
		public ExpressionContext _expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIB() { return GetToken(ExpParser.ATTRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public St_attibContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_attib; } }
	}

	[RuleVersion(0)]
	public St_attibContext st_attib() {
		St_attibContext _localctx = new St_attibContext(Context, State);
		EnterRule(_localctx, 26, RULE_st_attib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_localctx._NAME = Match(NAME);
			State = 190;
			Match(ATTRIB);
			State = 191;
			_localctx._expression = expression();

			        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            symbol_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null));
			            type_table.Add(_localctx._expression.type);            
			        }
			        
			        int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));
			        char type = type_table[index];

			        if (type == 'a') {
			            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is integer - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
			            has_error = true;
			        } else if (type == 'i') {
			            if (_localctx._expression.type == type) {
			                Emit("istore " + index, -1);
			            } else {
			                Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is integer - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
			                has_error = true;
			            }            
			        } else if (type == 's') {
			            if (_localctx._expression.type == type) {
			                Emit("astore " + index + "\n", -1);
			            } else {
			                Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is string  - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
			                has_error = true;
			            }             
			        } else {
			            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is array - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));         
			            has_error = true;
			        }        
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ExpressionContext e1;
		public IToken op;
		public ExpressionContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ExpParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(ExpParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ExpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(ExpParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ExpParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(ExpParser.LE, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 28, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_localctx.e1 = expression();
			State = 195;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NE) | (1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 196;
			_localctx.e2 = expression();

			        if (_localctx.e1.type != 'i' || _localctx.e2.type  != 'i') {
			            Console.Error.WriteLine("# error: cannot mix types - comparison - line " + (_localctx.op!=null?_localctx.op.Line:0));         
			            has_error = true;
			        }
			        if ((_localctx.op!=null?_localctx.op.Type:0) == EQ) {            
			            System.Console.Write("    if_icmpne ");          
			        } else if ((_localctx.op!=null?_localctx.op.Type:0) == NE) {
			            System.Console.Write("    if_icmpeq ");          
			        } else if ((_localctx.op!=null?_localctx.op.Type:0) == GT) {
			            System.Console.Write("    if_icmple ");          
			        } else if ((_localctx.op!=null?_localctx.op.Type:0) == GE) {
			            System.Console.Write("    if_icmplt ");          
			        } else if ((_localctx.op!=null?_localctx.op.Type:0) == LT) {
			            System.Console.Write("    if_icmpge ");          
			        } else if ((_localctx.op!=null?_localctx.op.Type:0) == LE) {
			            System.Console.Write("    if_icmpgt ");          
			        }
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public char type;
		public TermContext t1;
		public IToken op;
		public TermContext t2;
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(ExpParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(ExpParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(ExpParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(ExpParser.MINUS, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_localctx.t1 = term();
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 200;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 201;
				_localctx.t2 = term();

				        if (_localctx.t1.type != 'i' || _localctx.t2.type != 'i') {
				            Console.Error.WriteLine("# error: cannot mix types - plus or minus - line " + (_localctx.op!=null?_localctx.op.Line:0));         
				            has_error = true;
				        }
				        if ((_localctx.op!=null?_localctx.op.Type:0) == PLUS ) {
				            Emit("iadd", -1);
				        } else {
				            Emit("isub", -1);
				        }        
				    
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}

			        _localctx.type =  _localctx.t1.type;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public char type;
		public FactorContext f1;
		public IToken op;
		public FactorContext f2;
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIMES() { return GetTokens(ExpParser.TIMES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES(int i) {
			return GetToken(ExpParser.TIMES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OVER() { return GetTokens(ExpParser.OVER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER(int i) {
			return GetToken(ExpParser.OVER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REM() { return GetTokens(ExpParser.REM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM(int i) {
			return GetToken(ExpParser.REM, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 32, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_localctx.f1 = factor();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TIMES) | (1L << OVER) | (1L << REM))) != 0)) {
				{
				{
				State = 212;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TIMES) | (1L << OVER) | (1L << REM))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 213;
				_localctx.f2 = factor();

				        if (_localctx.f1.type != 'i' || _localctx.f2.type != 'i') {
				            Console.Error.WriteLine("# error: cannot mix types - times, over or rem - line " + (_localctx.op!=null?_localctx.op.Line:0));         
				            has_error = true;
				        }
				        if ((_localctx.op!=null?_localctx.op.Type:0) == TIMES ) {
				            Emit("imul", -1);
				        } else if ((_localctx.op!=null?_localctx.op.Type:0) == OVER ) {
				            Emit("idiv", -1);
				        } else {
				            Emit("irem", -1);
				        }
				    
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}

			        _localctx.type =  _localctx.f1.type;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public char type;
		public IToken _NUMBER;
		public IToken _STRING;
		public ExpressionContext _expression;
		public IToken _NAME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExpParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PAR() { return GetToken(ExpParser.OP_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_PAR() { return GetToken(ExpParser.CL_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_INT() { return GetToken(ExpParser.READ_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_STR() { return GetToken(ExpParser.READ_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ExpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(ExpParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BRA() { return GetToken(ExpParser.OP_BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_BRA() { return GetToken(ExpParser.CL_BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 34, RULE_factor);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				_localctx._NUMBER = Match(NUMBER);

				        Emit("ldc " + (_localctx._NUMBER!=null?_localctx._NUMBER.Text:null), 1);
				        _localctx.type =  'i';
				    
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				_localctx._STRING = Match(STRING);

				        Emit("ldc " + (_localctx._STRING!=null?_localctx._STRING.Text:null), 1);
				        _localctx.type =  's';
				    
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227;
				Match(OP_PAR);
				State = 228;
				_localctx._expression = expression();
				State = 229;
				Match(CL_PAR);

				        _localctx.type =  _localctx._expression.type;
				    
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 232;
				_localctx._NAME = Match(NAME);

				        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
				            Console.Error.WriteLine("# error: variable not declared: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "'");         
				            has_error = true;
				        } else {
				            // vai auxiliar no controle das variáveis usadas        
				            if (!used_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
				                used_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null)); 
				            }

				            int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));            
				            char type = type_table[index];

				            if (type == 'i') {
				                Emit("iload " + index, 1);
				                _localctx.type =  'i';
				            } else if (type == 's') {
				                Emit("aload " + index, 1);
				                _localctx.type =  's';
				            } else if (type == 'a') {
				                Emit("aload " + index, 1);
				                _localctx.type =  'a';
				            } else {
				                Console.Error.WriteLine("# error: type error in factor - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));         
				                has_error = true;
				            }
				        }
				    
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 234;
				Match(READ_INT);
				State = 235;
				Match(OP_PAR);
				State = 236;
				Match(CL_PAR);

				        Emit("invokestatic Runtime/readInt()I", 1);
				        _localctx.type =  'i';
				    
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 238;
				Match(READ_STR);
				State = 239;
				Match(OP_PAR);
				State = 240;
				Match(CL_PAR);

				        Emit("invokestatic Runtime/readString()Ljava/lang/String;", 1);        
				        _localctx.type =  's';
				    
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 242;
				_localctx._NAME = Match(NAME);

				        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
				            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' not defined - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
				            has_error = true;
				        } else {
				            int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));
				            char type = type_table[index];

				            if (type != 'a') {
				                Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is not array - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
				                has_error = true;
				            } else {
				                Emit("aload " + index, 1);        
				            }
				        }        
				    
				State = 244;
				Match(DOT);
				State = 245;
				Match(LENGTH);
				       
				        Emit("invokevirtual Array/length()I", 0);                
				        _localctx.type =  'i';     
				    
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 247;
				_localctx._NAME = Match(NAME);

				        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
				            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' not defined - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
				            has_error = true;
				        } else {
				            int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));
				            char type = type_table[index];
				            if (type != 'a') {
				                Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is not array - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
				                has_error = true;
				            } else {
				                Emit("aload " + index, 1);
				            }
				        }
				    
				State = 249;
				Match(OP_BRA);
				State = 250;
				expression();
				State = 251;
				Match(CL_BRA);
				   
				        Emit("invokevirtual Array/get(I)I", -1);        
				        _localctx.type =  'i';   
				    
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 254;
				_localctx._NAME = Match(NAME);
				State = 255;
				Match(OP_PAR);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_PAR) | (1L << READ_INT) | (1L << READ_STR) | (1L << NUMBER) | (1L << NAME) | (1L << STRING))) != 0)) {
					{
					State = 256;
					arguments();
					}
				}

				       
				        params_modifier = "";

				        for (int i = 0; i < arguments_global; i++) {
				            params_modifier += "I";
				        }
				        
				        int aux = arguments_global;        
				         
				        string function_name = (_localctx._NAME!=null?_localctx._NAME.Text:null) + "(" + params_modifier + ")I";        
				        
				        arguments_global = 0;      
				    
				State = 260;
				Match(CL_PAR);
				              
				        if (!functions_list.Contains(function_name)) {            
				            Console.Error.WriteLine("# error: function '" + function_name + "' was never declared or wrong number of arguments - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
				            has_error = true;
				        } else {
				            Emit("invokestatic Test/" + function_name + "\n", -aux + 1);            
				        }
				        
				        _localctx.type =  'i';
				    
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_callContext : ParserRuleContext {
		public IToken _NAME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PAR() { return GetToken(ExpParser.OP_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_PAR() { return GetToken(ExpParser.CL_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public St_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_call; } }
	}

	[RuleVersion(0)]
	public St_callContext st_call() {
		St_callContext _localctx = new St_callContext(Context, State);
		EnterRule(_localctx, 36, RULE_st_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_localctx._NAME = Match(NAME);
			State = 265;
			Match(OP_PAR);
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_PAR) | (1L << READ_INT) | (1L << READ_STR) | (1L << NUMBER) | (1L << NAME) | (1L << STRING))) != 0)) {
				{
				State = 266;
				arguments();
				}
			}


			        params_modifier = "";

			        for (int i = 0; i < arguments_global; i++) {
			            params_modifier += "I";
			        }        

			        int aux = arguments_global;
			        
			        string function_name = (_localctx._NAME!=null?_localctx._NAME.Text:null) + "(" + params_modifier + ")V";    

			        arguments_global = 0;        
			    
			State = 270;
			Match(CL_PAR);

			        if (!functions_list.Contains(function_name)) {            
			            Console.Error.WriteLine("# error: function '" + function_name + "' was never declared or wrong number of arguments - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
			            has_error = true;
			        } else {
			            Emit("invokestatic Test/" + function_name + "\n", -aux);
			        }
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionContext e1;
		public ExpressionContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExpParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 38, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_localctx.e1 = expression();
			 
			        if (_localctx.e1.type != 'i') {
			            Console.Error.WriteLine("# error: all arguments must be integer");
			            has_error = true;
			        } else {
			            symbol_table.Add((_localctx.e1!=null?TokenStream.GetText(_localctx.e1.Start,_localctx.e1.Stop):null));
			            used_table.Add((_localctx.e1!=null?TokenStream.GetText(_localctx.e1.Start,_localctx.e1.Stop):null));
			            type_table.Add('i');        
			        }
			        arguments_global++;
			    
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 275;
				Match(COMMA);
				State = 276;
				_localctx.e2 = expression();
				        
				            if (_localctx.e2.type != 'i') {
				                Console.Error.WriteLine("# error: all arguments must be integer");
				                has_error = true;
				            } else {
				                symbol_table.Add((_localctx.e1!=null?TokenStream.GetText(_localctx.e1.Start,_localctx.e1.Stop):null));
				                used_table.Add((_localctx.e1!=null?TokenStream.GetText(_localctx.e1.Start,_localctx.e1.Stop):null));
				                type_table.Add('i');        
				            }
				            arguments_global++;
				        
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_returnContext : ParserRuleContext {
		public ExpressionContext e1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(ExpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public St_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_return; } }
	}

	[RuleVersion(0)]
	public St_returnContext st_return() {
		St_returnContext _localctx = new St_returnContext(Context, State);
		EnterRule(_localctx, 40, RULE_st_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(RETURN);
			State = 285;
			_localctx.e1 = expression();

			        if (!has_return) {
			            Console.Error.WriteLine("# error: a void function does not return a value");
			            has_error = true;
			        } else {
			            if (_localctx.e1.type != 'i') {
			                Console.Error.WriteLine("# error: return value must be of integer type");
			                has_error = true;
			            } else {
			                Emit("ireturn", 0); 
			            }
			        }
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '(', '\x123', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '/', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x32', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', ':', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '?', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', 
		'\x3', '\x44', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'G', '\v', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'Q', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', 'T', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x6', '\x5', 'X', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 'Y', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'i', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'u', '\n', 
		'\a', '\f', '\a', '\xE', '\a', 'x', '\v', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x6', '\b', '\x82', '\n', '\b', '\r', '\b', '\xE', '\b', '\x83', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x6', 
		'\b', '\x8B', '\n', '\b', '\r', '\b', '\xE', '\b', '\x8C', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x91', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x6', '\t', '\x9B', '\n', '\t', '\r', '\t', '\xE', '\t', '\x9C', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\a', '\x11', '\xCF', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 
		'\xD2', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xDB', 
		'\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xDE', '\v', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x104', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x109', '\n', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x10E', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\x11A', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x11D', '\v', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x2', '\x2', '\x17', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', '\x2', '\x5', '\x3', '\x2', '\x10', '\x15', '\x3', '\x2', 
		'\x5', '\x6', '\x3', '\x2', '\a', '\t', '\x2', '\x12F', '\x2', ',', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x35', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'K', '\x3', '\x2', '\x2', '\x2', '\b', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'h', '\x3', '\x2', '\x2', '\x2', '\f', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '|', '\x3', '\x2', '\x2', '\x2', '\x10', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', ' ', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xD5', '\x3', '\x2', '\x2', '\x2', '$', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x10A', '\x3', '\x2', '\x2', '\x2', '(', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		',', '\x30', '\b', '\x2', '\x1', '\x2', '-', '/', '\x5', '\x4', '\x3', 
		'\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x5', '\b', 
		'\x5', '\x2', '\x34', '\x3', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\a', '#', '\x2', '\x2', '\x36', '\x37', '\a', '\'', '\x2', '\x2', '\x37', 
		'\x39', '\a', '\n', '\x2', '\x2', '\x38', ':', '\x5', '\x6', '\x4', '\x2', 
		'\x39', '\x38', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '>', '\a', '\v', 
		'\x2', '\x2', '<', '=', '\a', '$', '\x2', '\x2', '=', '?', '\b', '\x3', 
		'\x1', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\b', 
		'\x3', '\x1', '\x2', '\x41', '\x45', '\a', '\xE', '\x2', '\x2', '\x42', 
		'\x44', '\x5', '\n', '\x6', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'H', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '\xF', '\x2', '\x2', 'I', 'J', '\b', '\x3', '\x1', '\x2', 
		'J', '\x5', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\'', '\x2', '\x2', 
		'L', 'R', '\b', '\x4', '\x1', '\x2', 'M', 'N', '\a', '\r', '\x2', '\x2', 
		'N', 'O', '\a', '\'', '\x2', '\x2', 'O', 'Q', '\b', '\x4', '\x1', '\x2', 
		'P', 'M', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 
		'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 
		'S', '\a', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'W', '\b', '\x5', '\x1', '\x2', 'V', 'X', '\x5', '\n', '\x6', 
		'\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\b', '\x5', '\x1', 
		'\x2', '\\', '\t', '\x3', '\x2', '\x2', '\x2', ']', 'i', '\x5', '\f', 
		'\a', '\x2', '^', 'i', '\x5', '\x1C', '\xF', '\x2', '_', 'i', '\x5', '\xE', 
		'\b', '\x2', '`', 'i', '\x5', '\x10', '\t', '\x2', '\x61', 'i', '\x5', 
		'\x12', '\n', '\x2', '\x62', 'i', '\x5', '\x14', '\v', '\x2', '\x63', 
		'i', '\x5', '\x16', '\f', '\x2', '\x64', 'i', '\x5', '\x18', '\r', '\x2', 
		'\x65', 'i', '\x5', '\x1A', '\xE', '\x2', '\x66', 'i', '\x5', '&', '\x14', 
		'\x2', 'g', 'i', '\x5', '*', '\x16', '\x2', 'h', ']', '\x3', '\x2', '\x2', 
		'\x2', 'h', '^', '\x3', '\x2', '\x2', '\x2', 'h', '_', '\x3', '\x2', '\x2', 
		'\x2', 'h', '`', '\x3', '\x2', '\x2', '\x2', 'h', '\x61', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x62', '\x3', '\x2', '\x2', '\x2', 'h', '\x63', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\x64', '\x3', '\x2', '\x2', '\x2', 'h', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 
		'g', '\x3', '\x2', '\x2', '\x2', 'i', '\v', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '\x16', '\x2', '\x2', 'k', 'l', '\a', '\n', '\x2', '\x2', 
		'l', 'm', '\b', '\a', '\x1', '\x2', 'm', 'n', '\x5', ' ', '\x11', '\x2', 
		'n', 'v', '\b', '\a', '\x1', '\x2', 'o', 'p', '\a', '\r', '\x2', '\x2', 
		'p', 'q', '\b', '\a', '\x1', '\x2', 'q', 'r', '\x5', ' ', '\x11', '\x2', 
		'r', 's', '\b', '\a', '\x1', '\x2', 's', 'u', '\x3', '\x2', '\x2', '\x2', 
		't', 'o', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 
		'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 
		'w', 'y', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\a', '\v', '\x2', '\x2', 'z', '{', '\b', '\a', '\x1', '\x2', 
		'{', '\r', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\x19', '\x2', 
		'\x2', '}', '~', '\x5', '\x1E', '\x10', '\x2', '~', '\x7F', '\b', '\b', 
		'\x1', '\x2', '\x7F', '\x81', '\a', '\xE', '\x2', '\x2', '\x80', '\x82', 
		'\x5', '\n', '\x6', '\x2', '\x81', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\xF', '\x2', '\x2', 
		'\x86', '\x90', '\b', '\b', '\x1', '\x2', '\x87', '\x88', '\a', '\x1A', 
		'\x2', '\x2', '\x88', '\x8A', '\a', '\xE', '\x2', '\x2', '\x89', '\x8B', 
		'\x5', '\n', '\x6', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\xF', '\x2', '\x2', 
		'\x8F', '\x91', '\x3', '\x2', '\x2', '\x2', '\x90', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\b', '\b', '\x1', '\x2', 
		'\x93', '\xF', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\x1B', 
		'\x2', '\x2', '\x95', '\x96', '\b', '\t', '\x1', '\x2', '\x96', '\x97', 
		'\x5', '\x1E', '\x10', '\x2', '\x97', '\x98', '\b', '\t', '\x1', '\x2', 
		'\x98', '\x9A', '\a', '\xE', '\x2', '\x2', '\x99', '\x9B', '\x5', '\n', 
		'\x6', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\b', '\t', '\x1', '\x2', '\x9F', '\xA0', 
		'\a', '\xF', '\x2', '\x2', '\xA0', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\a', '\x1C', '\x2', '\x2', '\xA2', '\xA3', '\b', '\n', 
		'\x1', '\x2', '\xA3', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', 
		'\a', '\x1D', '\x2', '\x2', '\xA5', '\xA6', '\b', '\v', '\x1', '\x2', 
		'\xA6', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\'', 
		'\x2', '\x2', '\xA8', '\xA9', '\a', '\f', '\x2', '\x2', '\xA9', '\xAA', 
		'\a', ' ', '\x2', '\x2', '\xAA', '\xAB', '\a', '!', '\x2', '\x2', '\xAB', 
		'\xAC', '\b', '\f', '\x1', '\x2', '\xAC', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\a', '\'', '\x2', '\x2', '\xAE', '\xAF', '\b', 
		'\r', '\x1', '\x2', '\xAF', '\xB0', '\a', '\"', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '\x1E', '\x2', '\x2', '\xB1', '\xB2', '\a', '\n', '\x2', 
		'\x2', '\xB2', '\xB3', '\x5', ' ', '\x11', '\x2', '\xB3', '\xB4', '\b', 
		'\r', '\x1', '\x2', '\xB4', '\xB5', '\a', '\v', '\x2', '\x2', '\xB5', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\'', '\x2', 
		'\x2', '\xB7', '\xB8', '\b', '\xE', '\x1', '\x2', '\xB8', '\xB9', '\a', 
		' ', '\x2', '\x2', '\xB9', '\xBA', '\x5', ' ', '\x11', '\x2', '\xBA', 
		'\xBB', '\a', '!', '\x2', '\x2', '\xBB', '\xBC', '\a', '\f', '\x2', '\x2', 
		'\xBC', '\xBD', '\x5', ' ', '\x11', '\x2', '\xBD', '\xBE', '\b', '\xE', 
		'\x1', '\x2', '\xBE', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', 
		'\a', '\'', '\x2', '\x2', '\xC0', '\xC1', '\a', '\f', '\x2', '\x2', '\xC1', 
		'\xC2', '\x5', ' ', '\x11', '\x2', '\xC2', '\xC3', '\b', '\xF', '\x1', 
		'\x2', '\xC3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x5', 
		' ', '\x11', '\x2', '\xC5', '\xC6', '\t', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\x5', ' ', '\x11', '\x2', '\xC7', '\xC8', '\b', '\x10', '\x1', 
		'\x2', '\xC8', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xD0', '\x5', 
		'\"', '\x12', '\x2', '\xCA', '\xCB', '\t', '\x3', '\x2', '\x2', '\xCB', 
		'\xCC', '\x5', '\"', '\x12', '\x2', '\xCC', '\xCD', '\b', '\x11', '\x1', 
		'\x2', '\xCD', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\b', '\x11', '\x1', '\x2', '\xD4', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xDC', '\x5', '$', '\x13', '\x2', 
		'\xD6', '\xD7', '\t', '\x4', '\x2', '\x2', '\xD7', '\xD8', '\x5', '$', 
		'\x13', '\x2', '\xD8', '\xD9', '\b', '\x12', '\x1', '\x2', '\xD9', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xE0', '\b', '\x12', '\x1', '\x2', '\xE0', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xE2', '\a', '&', '\x2', '\x2', '\xE2', '\x109', 
		'\b', '\x13', '\x1', '\x2', '\xE3', '\xE4', '\a', '(', '\x2', '\x2', '\xE4', 
		'\x109', '\b', '\x13', '\x1', '\x2', '\xE5', '\xE6', '\a', '\n', '\x2', 
		'\x2', '\xE6', '\xE7', '\x5', ' ', '\x11', '\x2', '\xE7', '\xE8', '\a', 
		'\v', '\x2', '\x2', '\xE8', '\xE9', '\b', '\x13', '\x1', '\x2', '\xE9', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '\'', '\x2', 
		'\x2', '\xEB', '\x109', '\b', '\x13', '\x1', '\x2', '\xEC', '\xED', '\a', 
		'\x17', '\x2', '\x2', '\xED', '\xEE', '\a', '\n', '\x2', '\x2', '\xEE', 
		'\xEF', '\a', '\v', '\x2', '\x2', '\xEF', '\x109', '\b', '\x13', '\x1', 
		'\x2', '\xF0', '\xF1', '\a', '\x18', '\x2', '\x2', '\xF1', '\xF2', '\a', 
		'\n', '\x2', '\x2', '\xF2', '\xF3', '\a', '\v', '\x2', '\x2', '\xF3', 
		'\x109', '\b', '\x13', '\x1', '\x2', '\xF4', '\xF5', '\a', '\'', '\x2', 
		'\x2', '\xF5', '\xF6', '\b', '\x13', '\x1', '\x2', '\xF6', '\xF7', '\a', 
		'\"', '\x2', '\x2', '\xF7', '\xF8', '\a', '\x1F', '\x2', '\x2', '\xF8', 
		'\x109', '\b', '\x13', '\x1', '\x2', '\xF9', '\xFA', '\a', '\'', '\x2', 
		'\x2', '\xFA', '\xFB', '\b', '\x13', '\x1', '\x2', '\xFB', '\xFC', '\a', 
		' ', '\x2', '\x2', '\xFC', '\xFD', '\x5', ' ', '\x11', '\x2', '\xFD', 
		'\xFE', '\a', '!', '\x2', '\x2', '\xFE', '\xFF', '\b', '\x13', '\x1', 
		'\x2', '\xFF', '\x109', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\a', '\'', '\x2', '\x2', '\x101', '\x103', '\a', '\n', '\x2', '\x2', 
		'\x102', '\x104', '\x5', '(', '\x15', '\x2', '\x103', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\b', '\x13', '\x1', 
		'\x2', '\x106', '\x107', '\a', '\v', '\x2', '\x2', '\x107', '\x109', '\b', 
		'\x13', '\x1', '\x2', '\x108', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\x108', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x108', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\xF0', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\x108', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x100', '\x3', '\x2', '\x2', '\x2', '\x109', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x10B', '\a', '\'', '\x2', '\x2', '\x10B', 
		'\x10D', '\a', '\n', '\x2', '\x2', '\x10C', '\x10E', '\x5', '(', '\x15', 
		'\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x110', '\b', '\x14', '\x1', '\x2', '\x110', '\x111', '\a', 
		'\v', '\x2', '\x2', '\x111', '\x112', '\b', '\x14', '\x1', '\x2', '\x112', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x5', ' ', '\x11', 
		'\x2', '\x114', '\x11B', '\b', '\x15', '\x1', '\x2', '\x115', '\x116', 
		'\a', '\r', '\x2', '\x2', '\x116', '\x117', '\x5', ' ', '\x11', '\x2', 
		'\x117', '\x118', '\b', '\x15', '\x1', '\x2', '\x118', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x115', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11F', '\a', '%', '\x2', '\x2', '\x11F', '\x120', '\x5', ' ', '\x11', 
		'\x2', '\x120', '\x121', '\b', '\x16', '\x1', '\x2', '\x121', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x30', '\x39', '>', '\x45', 'R', 'Y', 'h', 
		'v', '\x83', '\x8C', '\x90', '\x9C', '\xD0', '\xDC', '\x103', '\x108', 
		'\x10D', '\x11B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Exp.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    #pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class ExpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, SPACE=2, PLUS=3, MINUS=4, TIMES=5, OVER=6, REM=7, OP_PAR=8, 
		CL_PAR=9, ATTRIB=10, COMMA=11, OP_CUR=12, CL_CUR=13, EQ=14, NE=15, GT=16, 
		GE=17, LT=18, LE=19, PRINT=20, READ_INT=21, READ_STR=22, IF=23, ELSE=24, 
		WHILE=25, BREAK=26, CONTINUE=27, PUSH=28, LENGTH=29, OP_BRA=30, CL_BRA=31, 
		DOT=32, NUMBER=33, NAME=34, STRING=35;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_statement = 2, RULE_st_print = 3, 
		RULE_st_if = 4, RULE_st_while = 5, RULE_st_break = 6, RULE_st_continue = 7, 
		RULE_st_array_new = 8, RULE_st_array_push = 9, RULE_st_array_set = 10, 
		RULE_st_attib = 11, RULE_comparison = 12, RULE_expression = 13, RULE_term = 14, 
		RULE_factor = 15;
	public static readonly string[] ruleNames = {
		"program", "main", "statement", "st_print", "st_if", "st_while", "st_break", 
		"st_continue", "st_array_new", "st_array_push", "st_array_set", "st_attib", 
		"comparison", "expression", "term", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", "'='", 
		"','", "'{'", "'}'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'print'", 
		"'read_int'", "'read_str'", "'if'", "'else'", "'while'", "'break'", "'continue'", 
		"'push'", "'length'", "'['", "']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "SPACE", "PLUS", "MINUS", "TIMES", "OVER", "REM", "OP_PAR", 
		"CL_PAR", "ATTRIB", "COMMA", "OP_CUR", "CL_CUR", "EQ", "NE", "GT", "GE", 
		"LT", "LE", "PRINT", "READ_INT", "READ_STR", "IF", "ELSE", "WHILE", "BREAK", 
		"CONTINUE", "PUSH", "LENGTH", "OP_BRA", "CL_BRA", "DOT", "NUMBER", "NAME", 
		"STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    List<string> symbol_table = new List<string>();
	    List<char> type_table = new List<char>();
	    List<string> used_table = new List<string>();

	    int stack_max = 0;
	    int stack_curr = 0;
	    
	    int if_global = 0;
	    // int has_else = 0;
	    // int else_global = 0;
	   
	    int while_break_continue = 0;
	    int while_global = 0;
	    bool inside_while = false;

	    List<int> else_local = new List<int>();

	    void Emit(string s, int n)
	    {
	        stack_curr += n;

	        if (stack_curr > stack_max) {
	            stack_max = stack_curr;
	        }

	        // if só para melhorar o visual, o espaço extra não influenciava em nada
	        if(s[0] != 'N' && s[0] != 'B' && s[0] != 'E') {
	            System.Console.WriteLine("    " + s);
	        } else {
	            System.Console.WriteLine(s);
	        }
	    }

		public ExpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{

			        System.Console.WriteLine(".source Test.src");
			        System.Console.WriteLine(".class  public Test");
			        System.Console.WriteLine(".super  java/lang/Object\n");
			        System.Console.WriteLine(".method public <init>()V");
			        System.Console.WriteLine("    aload_0");
			        System.Console.WriteLine("    invokenonvirtual java/lang/Object/<init>()V");
			        System.Console.WriteLine("    return");
			        System.Console.WriteLine(".end method\n");
			    
			State = 33;
			main();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{

			        System.Console.WriteLine(".method public static main([Ljava/lang/String;)V\n");               
			    
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 36;
				statement();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << CONTINUE) | (1L << NAME))) != 0) );

			        foreach (string s in symbol_table)
			        {
			            if (!used_table.Contains(s))
			            {                
			                Console.Error.WriteLine("\nERROR - variable not used: '" + s + "'\n");             
			                ////System.Environment.Exit(1);
			            }
			        }        

			        System.Console.WriteLine("    return");
			        System.Console.WriteLine(".limit stack " + stack_max); 
			              
			        if (symbol_table.Count > 0) {
			            System.Console.WriteLine(".limit locals " + symbol_table.Count);
			        }    

			        System.Console.WriteLine(".end method");
			        System.Console.Write("\n; symbol_table: ");
			        foreach (string s in symbol_table) {
			             System.Console.Write(s + " ");
			        }
			        System.Console.Write("\n; type_table: ");
			        foreach (char c in type_table) {
			             System.Console.Write(c + " ");
			        }        
			        System.Console.Write("\n; used_table: ");
			        foreach (string s in used_table) {
			             System.Console.Write(s + " ");
			        }
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public St_printContext st_print() {
			return GetRuleContext<St_printContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_attibContext st_attib() {
			return GetRuleContext<St_attibContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_ifContext st_if() {
			return GetRuleContext<St_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_whileContext st_while() {
			return GetRuleContext<St_whileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_breakContext st_break() {
			return GetRuleContext<St_breakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_continueContext st_continue() {
			return GetRuleContext<St_continueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_array_newContext st_array_new() {
			return GetRuleContext<St_array_newContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_array_pushContext st_array_push() {
			return GetRuleContext<St_array_pushContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public St_array_setContext st_array_set() {
			return GetRuleContext<St_array_setContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43;
				st_print();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44;
				st_attib();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45;
				st_if();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 46;
				st_while();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 47;
				st_break();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 48;
				st_continue();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 49;
				st_array_new();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 50;
				st_array_push();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 51;
				st_array_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_printContext : ParserRuleContext {
		public ExpressionContext e1;
		public ExpressionContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(ExpParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PAR() { return GetToken(ExpParser.OP_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_PAR() { return GetToken(ExpParser.CL_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExpParser.COMMA, i);
		}
		public St_printContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_print; } }
	}

	[RuleVersion(0)]
	public St_printContext st_print() {
		St_printContext _localctx = new St_printContext(Context, State);
		EnterRule(_localctx, 6, RULE_st_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(PRINT);
			State = 55;
			Match(OP_PAR);

			        Emit("getstatic java/lang/System/out Ljava/io/PrintStream;", 1);
			    
			State = 57;
			_localctx.e1 = expression();

			        if (_localctx.e1.type == 'i') {
			            Emit("invokevirtual java/io/PrintStream/print(I)V", -2);
			        } else if (_localctx.e1.type == 's') {
			            Emit("invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V", -2);        
			        } else if (_localctx.e1.type == 'a') {            
			            Emit("invokevirtual Array/string()Ljava/lang/String;", 0);        
			            Emit("invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V\n", 0);        
			        } else {
			            Console.Error.WriteLine("teste: " + _localctx.e1.type);            
			            Console.Error.WriteLine("\nERROR - Type error in 'e1'.\n");         
			            ////System.Environment.Exit(1);
			        }
			    
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 59;
				Match(COMMA);

				        Emit("getstatic java/lang/System/out Ljava/io/PrintStream;", 1);
				    
				State = 61;
				_localctx.e2 = expression();

				        if (_localctx.e2.type == 'i') {
				            Emit("invokevirtual java/io/PrintStream/print(I)V", -2);
				        } else if (_localctx.e2.type == 's') {
				            Emit("invokevirtual java/io/PrintStream/print(Ljava/lang/String;)V", 1);        
				        } else {
				            Console.Error.WriteLine("\nERROR - Type error in 'e2'.\n");         
				            ////System.Environment.Exit(1);
				        }
				    
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69;
			Match(CL_PAR);

			        Emit("getstatic java/lang/System/out Ljava/io/PrintStream;", 1);
			        Emit("invokevirtual java/io/PrintStream/println()V\n", -1);
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(ExpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OP_CUR() { return GetTokens(ExpParser.OP_CUR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_CUR(int i) {
			return GetToken(ExpParser.OP_CUR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CL_CUR() { return GetTokens(ExpParser.CL_CUR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_CUR(int i) {
			return GetToken(ExpParser.CL_CUR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(ExpParser.ELSE, 0); }
		public St_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_if; } }
	}

	[RuleVersion(0)]
	public St_ifContext st_if() {
		St_ifContext _localctx = new St_ifContext(Context, State);
		EnterRule(_localctx, 8, RULE_st_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(IF);
			State = 73;
			comparison();

			        int if_local = if_global;
			        if_global++;        
			        Emit("NOT_IF_" + if_local, -2); 
			    
			State = 75;
			Match(OP_CUR);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 76;
				statement();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << CONTINUE) | (1L << NAME))) != 0) );
			State = 81;
			Match(CL_CUR);

			        Emit("goto END_ELSE_" + if_local, 0);
			        System.Console.WriteLine("NOT_IF_" + if_local + ":");
			    
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 83;
				Match(ELSE);
				State = 84;
				Match(OP_CUR);
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 85;
					statement();
					}
					}
					State = 88;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << CONTINUE) | (1L << NAME))) != 0) );
				State = 90;
				Match(CL_CUR);
				}
			}

			       
			        System.Console.WriteLine("END_ELSE_" + if_local + ":");
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(ExpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_CUR() { return GetToken(ExpParser.OP_CUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_CUR() { return GetToken(ExpParser.CL_CUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public St_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_while; } }
	}

	[RuleVersion(0)]
	public St_whileContext st_while() {
		St_whileContext _localctx = new St_whileContext(Context, State);
		EnterRule(_localctx, 10, RULE_st_while);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(WHILE);

			        inside_while = true;
			        int while_local = while_global;
			        while_break_continue = while_local;
			        while_global++;       
			        System.Console.WriteLine("\n    BEGIN_WHILE_" + while_local + ":\n");
			    
			State = 98;
			comparison();

			        Emit("END_WHILE_" + while_local, 0); 
			    
			State = 100;
			Match(OP_CUR);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 101;
				statement();
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << CONTINUE) | (1L << NAME))) != 0) );
			State = 106;
			Match(CL_CUR);

			        Emit("goto BEGIN_WHILE_" + while_local, 0);
			        System.Console.WriteLine("\n    END_WHILE_" + while_local + ":\n");
			        inside_while = false;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_breakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(ExpParser.BREAK, 0); }
		public St_breakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_break; } }
	}

	[RuleVersion(0)]
	public St_breakContext st_break() {
		St_breakContext _localctx = new St_breakContext(Context, State);
		EnterRule(_localctx, 12, RULE_st_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(BREAK);

			        if (!inside_while) {
			            Console.Error.WriteLine("\nERROR - Trying to use 'break' outside a loop.\n");         
			            //System.Environment.Exit(1);
			        }
			        
			        Emit("goto END_WHILE_" +  while_break_continue, 0);
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_continueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(ExpParser.CONTINUE, 0); }
		public St_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_continue; } }
	}

	[RuleVersion(0)]
	public St_continueContext st_continue() {
		St_continueContext _localctx = new St_continueContext(Context, State);
		EnterRule(_localctx, 14, RULE_st_continue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(CONTINUE);

			        if (!inside_while) {
			            Console.Error.WriteLine("ERROR - Trying to use 'continue' outside a loop.\n");         
			            //System.Environment.Exit(1);
			        }

			        Emit("goto BEGIN_WHILE_" + while_break_continue, 0);
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_array_newContext : ParserRuleContext {
		public IToken _NAME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIB() { return GetToken(ExpParser.ATTRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BRA() { return GetToken(ExpParser.OP_BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_BRA() { return GetToken(ExpParser.CL_BRA, 0); }
		public St_array_newContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_array_new; } }
	}

	[RuleVersion(0)]
	public St_array_newContext st_array_new() {
		St_array_newContext _localctx = new St_array_newContext(Context, State);
		EnterRule(_localctx, 16, RULE_st_array_new);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_localctx._NAME = Match(NAME);
			State = 116;
			Match(ATTRIB);
			State = 117;
			Match(OP_BRA);
			State = 118;
			Match(CL_BRA);

			        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            symbol_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null));
			            type_table.Add('a');

			            Emit("new Array", 1);
			            Emit("dup", 1);
			            Emit("invokespecial Array/<init>()V", -1);

			            int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));
			            Emit("astore " + index + "\n", 1);            
			        } else {
			            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is already declared - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));         
			            //System.Environment.Exit(1);
			        }        
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_array_pushContext : ParserRuleContext {
		public IToken _NAME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ExpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUSH() { return GetToken(ExpParser.PUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PAR() { return GetToken(ExpParser.OP_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_PAR() { return GetToken(ExpParser.CL_PAR, 0); }
		public St_array_pushContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_array_push; } }
	}

	[RuleVersion(0)]
	public St_array_pushContext st_array_push() {
		St_array_pushContext _localctx = new St_array_pushContext(Context, State);
		EnterRule(_localctx, 18, RULE_st_array_push);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_localctx._NAME = Match(NAME);
			   
			        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            Console.Error.WriteLine("\nERROR - Variable does not exist - 'st_array_push' expression.\n");         
			            //System.Environment.Exit(1);
			        }

			        if (!used_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            used_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null)); 
			        }
			        int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));                    
			        Emit("aload " + index, 1);        
			    
			State = 123;
			Match(DOT);
			State = 124;
			Match(PUSH);
			State = 125;
			Match(OP_PAR);
			State = 126;
			expression();
			   
			        Emit("invokevirtual Array/push(I)V\n", -2);        
			    
			State = 128;
			Match(CL_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_array_setContext : ParserRuleContext {
		public IToken _NAME;
		public ExpressionContext e1;
		public ExpressionContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BRA() { return GetToken(ExpParser.OP_BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_BRA() { return GetToken(ExpParser.CL_BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIB() { return GetToken(ExpParser.ATTRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public St_array_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_array_set; } }
	}

	[RuleVersion(0)]
	public St_array_setContext st_array_set() {
		St_array_setContext _localctx = new St_array_setContext(Context, State);
		EnterRule(_localctx, 20, RULE_st_array_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_localctx._NAME = Match(NAME);

			        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' not defined - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
			        } else {
			            int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));
			            char type = type_table[index];
			            if (type != 'a') {
			                Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is not array - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));                    
			            } else {
			                Emit("aload " + index, -1);      
			            }
			        }
			    
			State = 132;
			Match(OP_BRA);
			State = 133;
			_localctx.e1 = expression();
			State = 134;
			Match(CL_BRA);
			State = 135;
			Match(ATTRIB);
			State = 136;
			_localctx.e2 = expression();
			              
			        if (_localctx.e1.type != 'i') {
			            Console.Error.WriteLine("# error: array index must be integer - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));         
			        } else if (_localctx.e2.type != 'i') {
			            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is array - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));         
			            //System.Environment.Exit(1);
			        // } else if (_localctx.e2.type != 'i') {
			        //     Console.Error.WriteLine("# error: cannot mix types - array element assignement");         
			        //     //System.Environment.Exit(1);
			        }

			        Emit("invokevirtual Array/set(II)V\n", -3);        
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class St_attibContext : ParserRuleContext {
		public IToken _NAME;
		public ExpressionContext _expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIB() { return GetToken(ExpParser.ATTRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public St_attibContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_st_attib; } }
	}

	[RuleVersion(0)]
	public St_attibContext st_attib() {
		St_attibContext _localctx = new St_attibContext(Context, State);
		EnterRule(_localctx, 22, RULE_st_attib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_localctx._NAME = Match(NAME);
			State = 140;
			Match(ATTRIB);
			State = 141;
			_localctx._expression = expression();

			        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
			            symbol_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null));
			            type_table.Add(_localctx._expression.type);            
			        }
			        
			        int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));
			        char type = type_table[index];

			        if (type == 'a') {
			            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is integer - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
			        } else if (type == 'i') {
			            if (_localctx._expression.type == type) {
			                Emit("istore " + index + "\n", -1);
			            } else {
			                Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is integer - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
			                //System.Environment.Exit(1);
			            }            
			        } else if (type == 's') {
			            if (_localctx._expression.type == type) {
			                Emit("astore " + index + "\n", -1);
			            } else {
			                Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is string  - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
			                //System.Environment.Exit(1);
			            }             
			        } else {
			            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is array - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));         
			            ////System.Environment.Exit(1);
			        }        
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ExpressionContext e1;
		public IToken op;
		public ExpressionContext e2;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ExpParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(ExpParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ExpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(ExpParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ExpParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(ExpParser.LE, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 24, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_localctx.e1 = expression();
			State = 145;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NE) | (1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 146;
			_localctx.e2 = expression();

			        if (_localctx.e1.type != 'i' || _localctx.e2.type  != 'i') {
			            Console.Error.WriteLine("# error: cannot mix types - comparison - line " + (_localctx.op!=null?_localctx.op.Line:0));         
			            //System.Environment.Exit(1);
			        }
			        if ((_localctx.op!=null?_localctx.op.Type:0) == EQ) {            
			            System.Console.Write("    if_icmpne ");          
			        } else if ((_localctx.op!=null?_localctx.op.Type:0) == NE) {
			            System.Console.Write("    if_icmpeq ");          
			        } else if ((_localctx.op!=null?_localctx.op.Type:0) == GT) {
			            System.Console.Write("    if_icmple ");          
			        } else if ((_localctx.op!=null?_localctx.op.Type:0) == GE) {
			            System.Console.Write("    if_icmplt ");          
			        } else if ((_localctx.op!=null?_localctx.op.Type:0) == LT) {
			            System.Console.Write("    if_icmpge ");          
			        } else if ((_localctx.op!=null?_localctx.op.Type:0) == LE) {
			            System.Console.Write("    if_icmpgt ");          
			        }
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public char type;
		public TermContext t1;
		public IToken op;
		public TermContext t2;
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(ExpParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(ExpParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(ExpParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(ExpParser.MINUS, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_localctx.t1 = term();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 150;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 151;
				_localctx.t2 = term();

				        if (_localctx.t1.type != 'i' || _localctx.t2.type != 'i') {
				            Console.Error.WriteLine("# error: cannot mix types - plus or minus - line " + (_localctx.op!=null?_localctx.op.Line:0));         
				            ////System.Environment.Exit(1);
				        }
				        if ((_localctx.op!=null?_localctx.op.Type:0) == PLUS ) {
				            Emit("iadd", -1);
				        } else {
				            Emit("isub", -1);
				        }        
				    
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}

			        _localctx.type =  _localctx.t1.type;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public char type;
		public FactorContext f1;
		public IToken op;
		public FactorContext f2;
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIMES() { return GetTokens(ExpParser.TIMES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES(int i) {
			return GetToken(ExpParser.TIMES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OVER() { return GetTokens(ExpParser.OVER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER(int i) {
			return GetToken(ExpParser.OVER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REM() { return GetTokens(ExpParser.REM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM(int i) {
			return GetToken(ExpParser.REM, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 28, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_localctx.f1 = factor();
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TIMES) | (1L << OVER) | (1L << REM))) != 0)) {
				{
				{
				State = 162;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TIMES) | (1L << OVER) | (1L << REM))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 163;
				_localctx.f2 = factor();

				        if (_localctx.f1.type != 'i' || _localctx.f2.type != 'i') {
				            Console.Error.WriteLine("# error: cannot mix types - times, over or rem - line " + (_localctx.op!=null?_localctx.op.Line:0));         
				            //System.Environment.Exit(1);
				        }
				        if ((_localctx.op!=null?_localctx.op.Type:0) == TIMES ) {
				            Emit("imul", -1);
				        } else if ((_localctx.op!=null?_localctx.op.Type:0) == OVER ) {
				            Emit("idiv", -1);
				        } else {
				            Emit("irem", -1);
				        }
				    
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}

			        _localctx.type =  _localctx.f1.type;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public char type;
		public IToken _NUMBER;
		public IToken _STRING;
		public ExpressionContext _expression;
		public IToken _NAME;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExpParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PAR() { return GetToken(ExpParser.OP_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_PAR() { return GetToken(ExpParser.CL_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(ExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_INT() { return GetToken(ExpParser.READ_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_STR() { return GetToken(ExpParser.READ_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ExpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(ExpParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BRA() { return GetToken(ExpParser.OP_BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CL_BRA() { return GetToken(ExpParser.CL_BRA, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 30, RULE_factor);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				_localctx._NUMBER = Match(NUMBER);

				        Emit("ldc " + (_localctx._NUMBER!=null?_localctx._NUMBER.Text:null), 1);
				        _localctx.type =  'i';
				    
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				_localctx._STRING = Match(STRING);

				        Emit("ldc " + (_localctx._STRING!=null?_localctx._STRING.Text:null), 1);
				        _localctx.type =  's';
				    
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				Match(OP_PAR);
				State = 178;
				_localctx._expression = expression();
				State = 179;
				Match(CL_PAR);

				        _localctx.type =  _localctx._expression.type;
				    
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 182;
				_localctx._NAME = Match(NAME);

				        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
				            Console.Error.WriteLine("\nERROR - variable not found: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "'\n");         
				            //System.Environment.Exit(1);
				        }       

				        // vai auxiliar no controle das variáveis usadas        
				        if (!used_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
				            used_table.Add((_localctx._NAME!=null?_localctx._NAME.Text:null)); 
				        }

				        int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));            
				        char type = type_table[index];

				        if (type == 'i') {
				            Emit("iload " + index, 1);
				            _localctx.type =  'i';
				        } else if (type == 's') {
				            Emit("aload " + index, 1);
				            _localctx.type =  's';
				         } else if (type == 'a') {
				            Emit("aload " + index, 1);
				            _localctx.type =  'a';
				        } else {
				            Console.Error.WriteLine("\nERROR - Type error in factor NAME.\n");         
				            ////System.Environment.Exit(1);
				        }       
				    
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 184;
				Match(READ_INT);
				State = 185;
				Match(OP_PAR);
				State = 186;
				Match(CL_PAR);

				        Emit("invokestatic Runtime/readInt()I", 1);
				        _localctx.type =  'i';
				    
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 188;
				Match(READ_STR);
				State = 189;
				Match(OP_PAR);
				State = 190;
				Match(CL_PAR);

				        Emit("invokestatic Runtime/readString()Ljava/lang/String;", 1);        
				        _localctx.type =  's';
				    
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 192;
				_localctx._NAME = Match(NAME);

				        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
				            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' not defined - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
				        } else {
				            int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));
				            char type = type_table[index];

				            if (type != 'a') {
				                Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is not array - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
				                
				            } else {
				                Emit("aload " + index, -1);        
				            }
				        }        
				    
				State = 194;
				Match(DOT);
				State = 195;
				Match(LENGTH);
				       
				        Emit("invokevirtual Array/length()I", 0);                
				        _localctx.type =  'i';     
				    
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 197;
				_localctx._NAME = Match(NAME);

				        if (!symbol_table.Contains((_localctx._NAME!=null?_localctx._NAME.Text:null))) {
				            Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' not defined - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
				        } else {
				            int index = symbol_table.IndexOf((_localctx._NAME!=null?_localctx._NAME.Text:null));
				            char type = type_table[index];
				            if (type != 'a') {
				                Console.Error.WriteLine("# error: '" + (_localctx._NAME!=null?_localctx._NAME.Text:null) + "' is not array - line " + (_localctx._NAME!=null?_localctx._NAME.Line:0));
				            } else {
				                Emit("aload " + index, -1);
				            }
				        }
				    
				State = 199;
				Match(OP_BRA);
				State = 200;
				expression();
				State = 201;
				Match(CL_BRA);
				   
				        Emit("invokevirtual Array/get(I)I", -1);        
				        _localctx.type =  'i';   
				    
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '%', '\xD1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x6', '\x3', '(', '\n', '\x3', '\r', '\x3', '\xE', 
		'\x3', ')', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x37', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x43', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x46', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x6', '\x6', 'P', '\n', '\x6', '\r', '\x6', 
		'\xE', '\x6', 'Q', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x6', '\x6', 'Y', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 
		'Z', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '_', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x6', '\a', 'i', '\n', '\a', '\r', '\a', '\xE', 
		'\a', 'j', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x9D', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xA0', '\v', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xA9', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\xAC', '\v', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xCF', '\n', '\x11', '\x3', '\x11', 
		'\x2', '\x2', '\x12', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\x2', '\x5', 
		'\x3', '\x2', '\x10', '\x15', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', 
		'\a', '\t', '\x2', '\xD7', '\x2', '\"', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x6', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x38', '\x3', '\x2', '\x2', '\x2', '\n', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x62', '\x3', '\x2', '\x2', '\x2', '\xE', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'r', '\x3', '\x2', '\x2', '\x2', '\x12', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '{', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x92', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xA3', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\b', '\x2', '\x1', '\x2', 
		'#', '$', '\x5', '\x4', '\x3', '\x2', '$', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '%', '\'', '\b', '\x3', '\x1', '\x2', '&', '(', '\x5', '\x6', '\x4', 
		'\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\b', 
		'\x3', '\x1', '\x2', ',', '\x5', '\x3', '\x2', '\x2', '\x2', '-', '\x37', 
		'\x5', '\b', '\x5', '\x2', '.', '\x37', '\x5', '\x18', '\r', '\x2', '/', 
		'\x37', '\x5', '\n', '\x6', '\x2', '\x30', '\x37', '\x5', '\f', '\a', 
		'\x2', '\x31', '\x37', '\x5', '\xE', '\b', '\x2', '\x32', '\x37', '\x5', 
		'\x10', '\t', '\x2', '\x33', '\x37', '\x5', '\x12', '\n', '\x2', '\x34', 
		'\x37', '\x5', '\x14', '\v', '\x2', '\x35', '\x37', '\x5', '\x16', '\f', 
		'\x2', '\x36', '-', '\x3', '\x2', '\x2', '\x2', '\x36', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '/', '\x3', '\x2', '\x2', '\x2', '\x36', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x32', '\x3', '\x2', '\x2', '\x2', '\x36', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\a', '\x16', '\x2', '\x2', '\x39', ':', '\a', '\n', '\x2', 
		'\x2', ':', ';', '\b', '\x5', '\x1', '\x2', ';', '<', '\x5', '\x1C', '\xF', 
		'\x2', '<', '\x44', '\b', '\x5', '\x1', '\x2', '=', '>', '\a', '\r', '\x2', 
		'\x2', '>', '?', '\b', '\x5', '\x1', '\x2', '?', '@', '\x5', '\x1C', '\xF', 
		'\x2', '@', '\x41', '\b', '\x5', '\x1', '\x2', '\x41', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '=', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', 
		'H', '\a', '\v', '\x2', '\x2', 'H', 'I', '\b', '\x5', '\x1', '\x2', 'I', 
		'\t', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\x19', '\x2', '\x2', 
		'K', 'L', '\x5', '\x1A', '\xE', '\x2', 'L', 'M', '\b', '\x6', '\x1', '\x2', 
		'M', 'O', '\a', '\xE', '\x2', '\x2', 'N', 'P', '\x5', '\x6', '\x4', '\x2', 
		'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\xF', '\x2', '\x2', 
		'T', '^', '\b', '\x6', '\x1', '\x2', 'U', 'V', '\a', '\x1A', '\x2', '\x2', 
		'V', 'X', '\a', '\xE', '\x2', '\x2', 'W', 'Y', '\x5', '\x6', '\x4', '\x2', 
		'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\xF', '\x2', 
		'\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', 'U', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\b', '\x6', '\x1', '\x2', '\x61', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x63', '\a', '\x1B', '\x2', '\x2', '\x63', '\x64', 
		'\b', '\a', '\x1', '\x2', '\x64', '\x65', '\x5', '\x1A', '\xE', '\x2', 
		'\x65', '\x66', '\b', '\a', '\x1', '\x2', '\x66', 'h', '\a', '\xE', '\x2', 
		'\x2', 'g', 'i', '\x5', '\x6', '\x4', '\x2', 'h', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\a', '\xF', '\x2', '\x2', 'm', 'n', '\b', '\a', '\x1', 
		'\x2', 'n', '\r', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\x1C', 
		'\x2', '\x2', 'p', 'q', '\b', '\b', '\x1', '\x2', 'q', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\a', '\x1D', '\x2', '\x2', 's', 't', '\b', '\t', 
		'\x1', '\x2', 't', '\x11', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', 
		'$', '\x2', '\x2', 'v', 'w', '\a', '\f', '\x2', '\x2', 'w', 'x', '\a', 
		' ', '\x2', '\x2', 'x', 'y', '\a', '!', '\x2', '\x2', 'y', 'z', '\b', 
		'\n', '\x1', '\x2', 'z', '\x13', '\x3', '\x2', '\x2', '\x2', '{', '|', 
		'\a', '$', '\x2', '\x2', '|', '}', '\b', '\v', '\x1', '\x2', '}', '~', 
		'\a', '\"', '\x2', '\x2', '~', '\x7F', '\a', '\x1E', '\x2', '\x2', '\x7F', 
		'\x80', '\a', '\n', '\x2', '\x2', '\x80', '\x81', '\x5', '\x1C', '\xF', 
		'\x2', '\x81', '\x82', '\b', '\v', '\x1', '\x2', '\x82', '\x83', '\a', 
		'\v', '\x2', '\x2', '\x83', '\x15', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\a', '$', '\x2', '\x2', '\x85', '\x86', '\b', '\f', '\x1', '\x2', 
		'\x86', '\x87', '\a', ' ', '\x2', '\x2', '\x87', '\x88', '\x5', '\x1C', 
		'\xF', '\x2', '\x88', '\x89', '\a', '!', '\x2', '\x2', '\x89', '\x8A', 
		'\a', '\f', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x1C', '\xF', '\x2', 
		'\x8B', '\x8C', '\b', '\f', '\x1', '\x2', '\x8C', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8E', '\a', '$', '\x2', '\x2', '\x8E', '\x8F', 
		'\a', '\f', '\x2', '\x2', '\x8F', '\x90', '\x5', '\x1C', '\xF', '\x2', 
		'\x90', '\x91', '\b', '\r', '\x1', '\x2', '\x91', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x93', '\x5', '\x1C', '\xF', '\x2', '\x93', '\x94', 
		'\t', '\x2', '\x2', '\x2', '\x94', '\x95', '\x5', '\x1C', '\xF', '\x2', 
		'\x95', '\x96', '\b', '\xE', '\x1', '\x2', '\x96', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x9E', '\x5', '\x1E', '\x10', '\x2', '\x98', '\x99', 
		'\t', '\x3', '\x2', '\x2', '\x99', '\x9A', '\x5', '\x1E', '\x10', '\x2', 
		'\x9A', '\x9B', '\b', '\xF', '\x1', '\x2', '\x9B', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', 
		'\b', '\xF', '\x1', '\x2', '\xA2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xAA', '\x5', ' ', '\x11', '\x2', '\xA4', '\xA5', '\t', '\x4', 
		'\x2', '\x2', '\xA5', '\xA6', '\x5', ' ', '\x11', '\x2', '\xA6', '\xA7', 
		'\b', '\x10', '\x1', '\x2', '\xA7', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\b', '\x10', 
		'\x1', '\x2', '\xAE', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', 
		'\a', '#', '\x2', '\x2', '\xB0', '\xCF', '\b', '\x11', '\x1', '\x2', '\xB1', 
		'\xB2', '\a', '%', '\x2', '\x2', '\xB2', '\xCF', '\b', '\x11', '\x1', 
		'\x2', '\xB3', '\xB4', '\a', '\n', '\x2', '\x2', '\xB4', '\xB5', '\x5', 
		'\x1C', '\xF', '\x2', '\xB5', '\xB6', '\a', '\v', '\x2', '\x2', '\xB6', 
		'\xB7', '\b', '\x11', '\x1', '\x2', '\xB7', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '$', '\x2', '\x2', '\xB9', '\xCF', '\b', 
		'\x11', '\x1', '\x2', '\xBA', '\xBB', '\a', '\x17', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', '\n', '\x2', '\x2', '\xBC', '\xBD', '\a', '\v', '\x2', '\x2', 
		'\xBD', '\xCF', '\b', '\x11', '\x1', '\x2', '\xBE', '\xBF', '\a', '\x18', 
		'\x2', '\x2', '\xBF', '\xC0', '\a', '\n', '\x2', '\x2', '\xC0', '\xC1', 
		'\a', '\v', '\x2', '\x2', '\xC1', '\xCF', '\b', '\x11', '\x1', '\x2', 
		'\xC2', '\xC3', '\a', '$', '\x2', '\x2', '\xC3', '\xC4', '\b', '\x11', 
		'\x1', '\x2', '\xC4', '\xC5', '\a', '\"', '\x2', '\x2', '\xC5', '\xC6', 
		'\a', '\x1F', '\x2', '\x2', '\xC6', '\xCF', '\b', '\x11', '\x1', '\x2', 
		'\xC7', '\xC8', '\a', '$', '\x2', '\x2', '\xC8', '\xC9', '\b', '\x11', 
		'\x1', '\x2', '\xC9', '\xCA', '\a', ' ', '\x2', '\x2', '\xCA', '\xCB', 
		'\x5', '\x1C', '\xF', '\x2', '\xCB', '\xCC', '\a', '!', '\x2', '\x2', 
		'\xCC', '\xCD', '\b', '\x11', '\x1', '\x2', '\xCD', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '!', '\x3', '\x2', '\x2', '\x2', '\f', ')', '\x36', '\x44', 'Q', 
		'Z', '^', 'j', '\x9E', '\xAA', '\xCE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
